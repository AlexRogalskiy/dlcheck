package com.devexperts.dlcheck;

/*
 * #%L
 * transformer
 * %%
 * Copyright (C) 2015 - 2017 Devexperts, LLC
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import org.objectweb.asm.Label;
import org.objectweb.asm.Type;
import org.objectweb.asm.commons.GeneratorAdapter;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static com.devexperts.dlcheck.TrasformationUtils.OBJECT_TYPE;
import static org.objectweb.asm.commons.GeneratorAdapter.EQ;

public class LockTransformer extends MethodTransformer {
    private final List<MethodInstructionPredicate> lockPredicates;
    private final List<MethodInstructionPredicate> tryLockPredicates;
    private final List<MethodInstructionPredicate> unlockPredicates;
    private final int lockLocal;

    LockTransformer(GeneratorAdapter mv, List<MethodInstructionPredicate> lockPredicates,
        List<MethodInstructionPredicate> tryLockPredicates, List<MethodInstructionPredicate> unlockPredicates,
        String className, String methodName, String fileName)
    {
        super(mv, className, methodName, fileName);
        this.lockPredicates = lockPredicates;
        this.tryLockPredicates = tryLockPredicates;
        this.unlockPredicates = unlockPredicates;
        lockLocal = mv.newLocal(OBJECT_TYPE);
    }

    public void visitMethodInsn(int opcode, String owner, String mname, String mdesc, boolean itf) {
        boolean isLock = lockPredicates.stream().anyMatch(p -> p.apply(opcode, owner, mname, mdesc, itf));
        if (isLock) {
            storeLockInstance(mdesc); // safe
            mv.visitMethodInsn(opcode, owner, mname, mdesc, itf);
            loadLockInstance();
            invokeAfterMonitorEnter(); // TODO is shouldn't be invoked unsafely
            return;
        }

        boolean isTryLock = tryLockPredicates.stream().anyMatch(p -> p.apply(opcode, owner, mname, mdesc, itf));
        if (isTryLock) {
            storeLockInstance(mdesc); // safe
            // Invoke tryLock, it returns boolean
            mv.visitMethodInsn(opcode, owner, mname, mdesc, itf);
            // Store the result to local variable
            int resultLocal = mv.newLocal(Type.BOOLEAN_TYPE);
            mv.dup();
            mv.storeLocal(resultLocal);
            // If result is "false", do not invoke afterMonitorEnter
            // The following code is generated:
            //
            // if (success) {
            //     afterMonitorEnter(lock);
            // }
            Label endIfLabel = new Label();
            mv.ifZCmp(EQ, endIfLabel);
                // If lock is acquired, invoke afterMonitorEnter
                loadLockInstance();
                invokeAfterMonitorEnter(); // TODO is shouldn't be invoked unsafely
            mv.visitLabel(endIfLabel);
            mv.loadLocal(resultLocal);
            return;
        }

        boolean isUnlock = unlockPredicates.stream().anyMatch(p -> p.apply(opcode, owner, mname, mdesc, itf));
        if (isUnlock) {
            storeLockInstance(mdesc); // safe
            mv.visitMethodInsn(opcode, owner, mname, mdesc, itf);
            TrasformationUtils.wrapCodeToMakeItSafe(mv, () -> {
                loadLockInstance();
                invokeAfterMonitorExit();
            });
            return;
        }
        mv.visitMethodInsn(opcode, owner, mname, mdesc, itf);
    }

    // Code generated by method is safe, it operates with local variables only
    private void loadLockInstance() {
        mv.loadLocal(lockLocal);
    }

    // Code generated by method is safe, it operates with local variables only
    private void storeLockInstance(String mdesc) {
        Type mtype = Type.getMethodType(mdesc);
        Type[] argumentTypes = mtype.getArgumentTypes();
        int n = argumentTypes.length;
        int[] localVars = new int[n];
        for (int i = 0; i < n; i++) {
            localVars[i] = mv.newLocal(argumentTypes[n - i - 1]);
            mv.storeLocal(localVars[i]);
        }
        mv.dup();
        mv.storeLocal(lockLocal);
        for (int i = argumentTypes.length - 1; i >= 0; i--) {
            mv.loadLocal(localVars[i]);
        }
    }
}
